/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2022-12-23
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * IdentityParams
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class IdentityParams {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CERT_NO = "cert_no";
  @SerializedName(SERIALIZED_NAME_CERT_NO)
  private String certNo;

  public static final String SERIALIZED_NAME_IDENTITY_HASH = "identity_hash";
  @SerializedName(SERIALIZED_NAME_IDENTITY_HASH)
  private String identityHash;

  public static final String SERIALIZED_NAME_SIGN_USER_ID = "sign_user_id";
  @SerializedName(SERIALIZED_NAME_SIGN_USER_ID)
  private String signUserId;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public IdentityParams() { 
  }

  public IdentityParams certNo(String certNo) {
    
    this.certNo = certNo;
    return this;
  }

   /**
   * 用户身份证号
   * @return certNo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "61102619921108888", value = "用户身份证号")

  public String getCertNo() {
    return certNo;
  }


  public void setCertNo(String certNo) {
    this.certNo = certNo;
  }


  public IdentityParams identityHash(String identityHash) {
    
    this.identityHash = identityHash;
    return this;
  }

   /**
   * 用户实名信息hash值
   * @return identityHash
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8D969EEF6ECAD3C29A3A629280E686CF0C3F5D5A86AFF3CA12020C923ADC6C92", value = "用户实名信息hash值")

  public String getIdentityHash() {
    return identityHash;
  }


  public void setIdentityHash(String identityHash) {
    this.identityHash = identityHash;
  }


  public IdentityParams signUserId(String signUserId) {
    
    this.signUserId = signUserId;
    return this;
  }

   /**
   * 签约指定用户的uid，如用户登录的uid和指定的用户uid不一致则报错
   * @return signUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2088202888530893", value = "签约指定用户的uid，如用户登录的uid和指定的用户uid不一致则报错")

  public String getSignUserId() {
    return signUserId;
  }


  public void setSignUserId(String signUserId) {
    this.signUserId = signUserId;
  }


  public IdentityParams userName(String userName) {
    
    this.userName = userName;
    return this;
  }

   /**
   * 用户姓名
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "张三", value = "用户姓名")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    this.userName = userName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityParams identityParams = (IdentityParams) o;
    return Objects.equals(this.certNo, identityParams.certNo) &&
        Objects.equals(this.identityHash, identityParams.identityHash) &&
        Objects.equals(this.signUserId, identityParams.signUserId) &&
        Objects.equals(this.userName, identityParams.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certNo, identityHash, signUserId, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityParams {\n");
    sb.append("    certNo: ").append(toIndentedString(certNo)).append("\n");
    sb.append("    identityHash: ").append(toIndentedString(identityHash)).append("\n");
    sb.append("    signUserId: ").append(toIndentedString(signUserId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cert_no");
    openapiFields.add("identity_hash");
    openapiFields.add("sign_user_id");
    openapiFields.add("user_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IdentityParams
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (IdentityParams.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentityParams is not found in the empty JSON string", IdentityParams.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IdentityParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentityParams` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("cert_no") != null && !jsonObj.get("cert_no").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cert_no` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cert_no").toString()));
      }
      if (jsonObj.get("identity_hash") != null && !jsonObj.get("identity_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity_hash").toString()));
      }
      if (jsonObj.get("sign_user_id") != null && !jsonObj.get("sign_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sign_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sign_user_id").toString()));
      }
      if (jsonObj.get("user_name") != null && !jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentityParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentityParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentityParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentityParams.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentityParams>() {
           @Override
           public void write(JsonWriter out, IdentityParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentityParams read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IdentityParams given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IdentityParams
  * @throws IOException if the JSON string is invalid with respect to IdentityParams
  */
  public static IdentityParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentityParams.class);
  }

 /**
  * Convert an instance of IdentityParams to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

