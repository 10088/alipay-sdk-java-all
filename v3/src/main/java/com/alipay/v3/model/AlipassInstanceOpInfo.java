/*
 * 支付宝开放平台API
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2022-12-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.alipay.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.alipay.v3.JSON;

/**
 * AlipassInstanceOpInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AlipassInstanceOpInfo {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_TPL_ID = "tpl_id";
  @SerializedName(SERIALIZED_NAME_TPL_ID)
  private String tplId;

  public static final String SERIALIZED_NAME_TPL_PARAMS = "tpl_params";
  @SerializedName(SERIALIZED_NAME_TPL_PARAMS)
  private String tplParams;

  public AlipassInstanceOpInfo() { 
  }

  public AlipassInstanceOpInfo order(Integer order) {
    
    this.order = order;
    return this;
  }

   /**
   * alipass实例信息顺序，正整数，按order顺排，不可重复。
   * @return order
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "alipass实例信息顺序，正整数，按order顺排，不可重复。")

  public Integer getOrder() {
    return order;
  }


  public void setOrder(Integer order) {
    this.order = order;
  }


  public AlipassInstanceOpInfo tplId(String tplId) {
    
    this.tplId = tplId;
    return this;
  }

   /**
   * 支付宝alipass模版ID，即调用模板创建接口时返回的tpl_id。
   * @return tplId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "f038871a4b1151e8038bb9277c3d52e3", value = "支付宝alipass模版ID，即调用模板创建接口时返回的tpl_id。")

  public String getTplId() {
    return tplId;
  }


  public void setTplId(String tplId) {
    this.tplId = tplId;
  }


  public AlipassInstanceOpInfo tplParams(String tplParams) {
    
    this.tplParams = tplParams;
    return this;
  }

   /**
   * 模版动态参数信息：对应模板中$变量名$的动态参数，见模板创建接口返回值中的tpl_params字段。
   * @return tplParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"title\":\"券标题\",\"channelID\":\"xxx\",\"serialNumer\":\"xxxx\"}", value = "模版动态参数信息：对应模板中$变量名$的动态参数，见模板创建接口返回值中的tpl_params字段。")

  public String getTplParams() {
    return tplParams;
  }


  public void setTplParams(String tplParams) {
    this.tplParams = tplParams;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlipassInstanceOpInfo alipassInstanceOpInfo = (AlipassInstanceOpInfo) o;
    return Objects.equals(this.order, alipassInstanceOpInfo.order) &&
        Objects.equals(this.tplId, alipassInstanceOpInfo.tplId) &&
        Objects.equals(this.tplParams, alipassInstanceOpInfo.tplParams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(order, tplId, tplParams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlipassInstanceOpInfo {\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    tplId: ").append(toIndentedString(tplId)).append("\n");
    sb.append("    tplParams: ").append(toIndentedString(tplParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("order");
    openapiFields.add("tpl_id");
    openapiFields.add("tpl_params");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AlipassInstanceOpInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (AlipassInstanceOpInfo.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlipassInstanceOpInfo is not found in the empty JSON string", AlipassInstanceOpInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AlipassInstanceOpInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlipassInstanceOpInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("tpl_id") != null && !jsonObj.get("tpl_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tpl_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tpl_id").toString()));
      }
      if (jsonObj.get("tpl_params") != null && !jsonObj.get("tpl_params").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tpl_params` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tpl_params").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlipassInstanceOpInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlipassInstanceOpInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlipassInstanceOpInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlipassInstanceOpInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AlipassInstanceOpInfo>() {
           @Override
           public void write(JsonWriter out, AlipassInstanceOpInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlipassInstanceOpInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AlipassInstanceOpInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AlipassInstanceOpInfo
  * @throws IOException if the JSON string is invalid with respect to AlipassInstanceOpInfo
  */
  public static AlipassInstanceOpInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlipassInstanceOpInfo.class);
  }

 /**
  * Convert an instance of AlipassInstanceOpInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

